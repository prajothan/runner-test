name: build deployment
on:
  push:
    branches:
      - '*'
jobs:
  display-branch:
    runs-on: ubuntu-latest
    outputs:
      pushed_branch: ${{ steps.branch.outputs.pushed_branch }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Display branch name
      run: |
        echo "Current branch: ${GITHUB_REF##*/}"

    - name: Set Dynamic Variable
      id: branch
      run: echo "pushed_branch=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
      
  #building .war file in cloud
  build:
    runs-on: ubuntu-latest
    outputs:
      pushed_branch_new: ${{ steps.branch_new.outputs.pushed_branch_new }}
    steps:
    - uses: actions/checkout@v2
    - name: Display branch name
      run: |
        echo "Current branch: ${GITHUB_REF##*/}"
    - name: Set Dynamic Variable
      id: branch_new
      run: echo "pushed_branch_new=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'
    - name: Build with Maven
      run: |
        pwd
        chmod +x mvnw
        ./mvnw clean package -Dmaven.test.skip
    #uploading war file into artifact - later it can be used in next job
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: output-war
        path: target/testrunner-0.0.1-SNAPSHOT.war
  #self-hosted job - which will run in windows power shell
  local-job:
    runs-on: self-hosted
    #will work only if previous build job - success
    needs: build
    env:
      processing_branch: ${{ needs.build.outputs.pushed_branch_new }}
    steps:
      - name: Processing Branch
        run: echo "The Branch is $processing_branch"
      - name: example
        run: echo "Hello runner test"
      #downloading artifact from previous build job
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: output-war
          #storing .war file into local system folder
          path: C:\prajoth\test-runner-service-wrapper
      #checking pressence of windows service
      - name: Check windows service exist or not
        run: |
          #name of service - also same used in winsw wrapper xml
          $serviceName = "TestRunner"
          $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
          if ($service){
            #service available
            if ($service.Status -eq 'Running') {
                #service running - so stopping
                C:\prajoth\test-runner-service-wrapper\test-runner-service-wrapper.exe stop
                #wait for 15 sec to complete stop - getting warning if not add this
                sleep 15
            }
            #service uninstall
            C:\prajoth\test-runner-service-wrapper\test-runner-service-wrapper.exe uninstall
          }
          #service install
          C:\prajoth\test-runner-service-wrapper\test-runner-service-wrapper.exe install
          #service start
          C:\prajoth\test-runner-service-wrapper\test-runner-service-wrapper.exe start
          
        
